import asyncio
from datetime import datetime, timedelta
import logging
import os 

from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile, ReplyKeyboardMarkup, KeyboardButton, FSInputFile   
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.strategy import FSMStrategy
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.types import ChatMemberUpdated

from filters import IsPrivate
from loader import bot
from data import config
from database.repo.requests import RequestsRepo
from utils import keyboards, texts

logger = logging.getLogger(__name__)

router = Router()

class CreateGiveawayState(StatesGroup):
    giveaway_message = State()
    giveaway_button_text = State()
    
    giveaway_count_winners = State()
    giveaway_start_date = State()
    giveaway_end_date = State()
    
    giveaway_publish_channels = State()
    giveaway_required_channels = State()
    
    giveaway_use_boost = State()
    giveaway_use_capha = State()
    giveaway_use_block_twinks = State()
    
    giveaway_save = State()
    
@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    keyboard = await keyboards.main_menu_keyboard()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)


@router.message(F.text == "üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", IsPrivate())
async def command_start(message: Message, repo: RequestsRepo, state: FSMContext):
    if await state.get_state() is not None:
        await state.clear()
        
        
    get_channels_admin = await repo.channels.get_active_channels_by_admin_id(message.from_user.id)
    if not get_channels_admin:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")]
        ])
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω–µ–≥–æ", reply_markup=keyboard)
        return
    
    get_active_giveaways = await repo.giveaways.get_active_giveaways_by_admin_id(message.from_user.id)
    if len(get_active_giveaways) >= 5:
        await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π (5/5).")
        return
        
    await state.set_state(CreateGiveawayState.giveaway_message)
    
    text = (
        f"<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b>\n\n"
        f"‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º üñº –∫–∞—Ä—Ç–∏–Ω–∫—É, –≤–∏–¥–µ–æ, GIF –∏–ª–∏ –ü—Ä–µ–º–∏—É–ºüéÜ—ç–º–æ–¥–∑–∏, –∞ —Ç–∞–∫ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑–º–µ—Ç–∫–æ–π.\n\n"
        f"‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –º–µ–¥–∏–∞—Ñ–∞–π–ª.\n\n"
        f"–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∏ –µ–º—É –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ, –µ—Å–ª–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–º –ø–æ—Å—Ç–µ –í—ã —É–∫–∞–∂–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ —Å—Å—ã–ª–∫—É, —Å–ø–∞—Å–∏–±–æ. @RandomGiveaway_Bot"
    )
    
    keyboard = await keyboards.cancel_keyboard()
    await message.answer(text, reply_markup=keyboard)


@router.message(StateFilter(CreateGiveawayState.giveaway_message), IsPrivate())
async def giveaway_message(message: Message, state: FSMContext):
    
    if message.content_type not in ["text", "photo", "video", "animation"]:
        await message.answer("üö´ –î–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return
    
    await state.update_data(giveaway_message=message.html_text)
    
    if message.photo:
        await state.update_data(giveaway_media=message.photo[0].file_id)
        await state.update_data(giveaway_media_type="photo")
        
        await message.answer_photo(message.photo[0].file_id, caption=message.html_text)    
    elif message.video:
        await state.update_data(giveaway_media=message.video.file_id)
        await state.update_data(giveaway_media_type="video")
        
        await message.answer_video(message.video.file_id, caption=message.html_text)
    elif message.animation:
        await state.update_data(giveaway_media=message.animation.file_id)
        await state.update_data(giveaway_media_type="animation")
        
        await message.answer_animation(message.animation.file_id, caption=message.html_text)
    elif message.sticker:
        await state.update_data(giveaway_media=message.sticker.file_id)
        await state.update_data(giveaway_media_type="sticker")
        
        await message.answer_sticker(message.sticker.file_id, caption=message.html_text)
    else:
        await state.update_data(giveaway_media_type="text")
        await message.answer(message.html_text, disable_web_page_preview=True) 
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="giveaway_confirm_message")]
    ])
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=keyboard)
    
    
@router.callback_query(F.data == "giveaway_confirm_message", StateFilter(CreateGiveawayState.giveaway_message))
async def giveaway_confirm_message(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    await state.set_state(CreateGiveawayState.giveaway_button_text)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"giveaway_choose_text:–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")],
        [InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤—É—é!", callback_data=f"giveaway_choose_text:–£—á–∞—Å—Ç–≤—É—é!")],
        [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data=f"giveaway_choose_text:–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ")]
    ])
    await callback.message.answer("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–Ω–æ–ø–∫–æ–π:", reply_markup=keyboard)

    
@router.callback_query(F.data.startswith("giveaway_choose_text:"), StateFilter(CreateGiveawayState.giveaway_button_text))
async def giveaway_button_text(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):

    await state.update_data(giveaway_button_text=callback.data.split(":")[1])
    await callback.message.edit_text("‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    await state.set_state(CreateGiveawayState.giveaway_required_channels)
    
    channels = await repo.channels.get_channels_by_admin_id(callback.from_user.id)  
    
    await state.update_data(giveaway_required_channels=[])
    await state.update_data(user_channels=channels)
    
    buttons = []
    for channel in channels:
        buttons.append([InlineKeyboardButton(text=f"{channel.channel_title}", callback_data=f"gcrc:{channel.channel_id}:no")])
    buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="giveaway_choose_channels_done")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    msg = await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø–æ–¥–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    await state.update_data(giveaway_channels_message_id=msg.message_id)

@router.callback_query(F.data.startswith("gcrc:"), StateFilter(CreateGiveawayState.giveaway_required_channels))
async def giveaway_choose_channel(callback: CallbackQuery, state: FSMContext):
    channel_id = callback.data.split(":")[1]
    is_checked = callback.data.split(":")[2]
    
    data = await state.get_data()
    user_channels = data.get("user_channels")
    giveaway_required_channels = data.get("giveaway_required_channels", [])
    
    if is_checked == "no":
        giveaway_required_channels.append(channel_id)
    else:
        giveaway_required_channels.remove(channel_id)
        
    await state.update_data(giveaway_required_channels=giveaway_required_channels)  
    
    buttons = []
    for channel in user_channels:
        if channel.channel_id in giveaway_required_channels:
            buttons.append([InlineKeyboardButton(text=f"{channel.channel_title} ‚úÖ", callback_data=f"gcrc:{channel.channel_id}:yes")])
        else:
            buttons.append([InlineKeyboardButton(text=f"{channel.channel_title}", callback_data=f"gcrc:{channel.channel_id}:no")])
    buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="giveaway_choose_channels_done")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    
@router.callback_query(F.data == "giveaway_choose_channels_done", StateFilter(CreateGiveawayState.giveaway_required_channels))
async def giveaway_choose_channels_done(callback: CallbackQuery, state: FSMContext):

    await callback.message.edit_text("üèÜ –°–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç—É?")
    
    await state.set_state(CreateGiveawayState.giveaway_count_winners)
    
@router.message(StateFilter(CreateGiveawayState.giveaway_count_winners), IsPrivate())
async def giveaway_count_winners(message: Message, state: FSMContext, repo: RequestsRepo):
    try:
        count_winners = int(message.text)
        
        if count_winners <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        elif count_winners > 250:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 250")
            return
        
        await state.update_data(giveaway_count_winners=count_winners)
        await message.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    
    except ValueError:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    buttons = []
    channels = await repo.channels.get_channels_by_admin_id(message.from_user.id)
    for channel in channels:
        buttons.append([InlineKeyboardButton(text=channel.channel_title, callback_data=f"gcpc:{channel.channel_id}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer("üóí –í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –ø—É–±–ª–∏–∫—É–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à?\n\n–û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ <code>üîó –ú–æ–∏ –∫–∞–Ω–∞–ª—ã</code>.", reply_markup=keyboard)
    await state.set_state(CreateGiveawayState.giveaway_publish_channels)


@router.callback_query(F.data.startswith("gcpc:"), StateFilter(CreateGiveawayState.giveaway_publish_channels))
async def giveaway_choose_publish_channels(callback: CallbackQuery, state: FSMContext):
    channel_id = callback.data.split(":")[1]
    
    await state.update_data(giveaway_publish_channel_id=channel_id)
    await callback.message.edit_text("‚úÖ –ö–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

    await state.set_state(CreateGiveawayState.giveaway_start_date)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å", callback_data="giveaway_choose_start_date:now")]
    ])
    
    date_now = datetime.now()
    text = (
        f"üïí –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n\n"
        f"<code>{(date_now + timedelta(minutes=10)).strftime('%d.%m.%Y %H:%M')}</code> - —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç\n"
        f"<code>{(date_now + timedelta(hours=1)).strftime('%d.%m.%Y %H:%M')}</code> - —á–µ—Ä–µ–∑ —á–∞—Å\n"
        f"<code>{(date_now + timedelta(days=1)).strftime('%d.%m.%Y %H:%M')}</code> - —á–µ—Ä–µ–∑ –¥–µ–Ω—å\n"
        f"<code>{(date_now + timedelta(days=7)).strftime('%d.%m.%Y %H:%M')}</code> - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é"
    )
    await callback.message.answer(text, reply_markup=keyboard)
    
@router.message(StateFilter(CreateGiveawayState.giveaway_start_date), IsPrivate())
async def giveaway_start_date(message: Message, state: FSMContext):
    date_str = message.text
    try:
        date_start = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        return
    
    await state.update_data(giveaway_start_date=date_start)
    date_now = datetime.now()   
    text = (
        f"üîö –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è?\n\n–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n\n"
        f"<code>{(date_now + timedelta(minutes=10)).strftime('%d.%m.%Y %H:%M')}</code> - —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç\n"
        f"<code>{(date_now + timedelta(hours=1)).strftime('%d.%m.%Y %H:%M')}</code> - —á–µ—Ä–µ–∑ —á–∞—Å\n"
        f"<code>{(date_now + timedelta(days=1)).strftime('%d.%m.%Y %H:%M')}</code> - —á–µ—Ä–µ–∑ –¥–µ–Ω—å\n"
        f"<code>{(date_now + timedelta(days=7)).strftime('%d.%m.%Y %H:%M')}</code> - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é\n\n"
        f"–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è"
    )
    await message.answer(text)  
    await state.set_state(CreateGiveawayState.giveaway_end_date)

    
@router.callback_query(F.data.startswith("giveaway_choose_start_date:"), StateFilter(CreateGiveawayState.giveaway_start_date))
async def giveaway_choose_start_date(callback: CallbackQuery, state: FSMContext):
    date_str = callback.data.split(":")[1]
    if date_str == "now":
        date_start = datetime.now()
    else:
        date_start = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
        
    await state.update_data(giveaway_start_date=date_start)
    date_now = datetime.now()   
    text = (
        f"üîö –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è?\n\n–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n\n"
        f"<code>{(date_now + timedelta(minutes=10)).strftime('%d.%m.%Y %H:%M')}</code> - —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç\n"
        f"<code>{(date_now + timedelta(hours=1)).strftime('%d.%m.%Y %H:%M')}</code> - —á–µ—Ä–µ–∑ —á–∞—Å\n"
        f"<code>{(date_now + timedelta(days=1)).strftime('%d.%m.%Y %H:%M')}</code> - —á–µ—Ä–µ–∑ –¥–µ–Ω—å\n"
        f"<code>{(date_now + timedelta(days=7)).strftime('%d.%m.%Y %H:%M')}</code> - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é\n\n"
        f"–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è"
    )
    await callback.message.edit_text(text)  
    await state.set_state(CreateGiveawayState.giveaway_end_date)
    
    
@router.message(StateFilter(CreateGiveawayState.giveaway_end_date), IsPrivate())
async def giveaway_end_date(message: Message, state: FSMContext, repo: RequestsRepo):
    date_str = message.text
    try:
        date_end = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        return
    
    await state.update_data(giveaway_end_date=date_end)
    
    await message.answer("‚úÖ –í—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")  
    
    data = await state.get_data()
    giveaway_message = data.get("giveaway_message")
    giveaway_media = data.get("giveaway_media")
    giveaway_media_type = data.get("giveaway_media_type")
    
    giveaway_button_text = data.get("giveaway_button_text")
    giveaway_count_winners = data.get("giveaway_count_winners")
    
    giveaway_publish_channel_id = data.get("giveaway_publish_channel_id")   
    giveaway_required_channels = data.get("giveaway_required_channels")   
    
    giveaway_start_date = data.get("giveaway_start_date")
    giveaway_end_date = data.get("giveaway_end_date")
    
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=giveaway_button_text, callback_data="pass")]
    ])  
    
    text_giveaway = giveaway_message
    if giveaway_media_type == "photo":
        await message.answer_photo(giveaway_media, caption=text_giveaway, reply_markup=keyboard)
    elif giveaway_media_type == "video":
        await message.answer_video(giveaway_media, caption=text_giveaway, reply_markup=keyboard)
    elif giveaway_media_type == "animation":
        await message.answer_animation(giveaway_media, caption=text_giveaway, reply_markup=keyboard)
    elif giveaway_media_type == "sticker":
        await message.answer_sticker(giveaway_media, caption=text_giveaway, reply_markup=keyboard)
    elif giveaway_media_type == "text":
        await message.answer(text_giveaway, reply_markup=keyboard)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="giveaway_save")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="giveaway_cancel")]
    ])
    
    channels_publish = await repo.channels.get_channels_by_ids([giveaway_publish_channel_id])
    channels_required = await repo.channels.get_channels_by_ids(giveaway_required_channels)
    
    text = (
        f"<b>–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à.</b>\n\n"
        f"–ù–∞—á–∞–ª–æ: {giveaway_start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"–ö–æ–Ω–µ—Ü: {giveaway_end_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"–ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {', '.join([f'<a href="{channel.channels_link}">{channel.channel_title}</a>' for channel in channels_publish])}\n"
        f"–ö–∞–Ω–∞–ª(—ã) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {', '.join([f'<a href="{channel.channels_link}">{channel.channel_title}</a>' for channel in channels_required])}\n\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {giveaway_count_winners}\n\n"
    )
    await message.answer(text, reply_markup=keyboard, disable_web_page_preview=True)
    
    await state.set_state(CreateGiveawayState.giveaway_save)
    
    
@router.callback_query(F.data.startswith("giveaway_"), StateFilter(CreateGiveawayState.giveaway_save))
async def giveaway_save(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    callback_data = callback.data.split("_")[1]
    
    if callback_data != "save":
        await callback.message.edit_text("‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        await state.clear() 
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await keyboards.main_menu_keyboard())
        return
    
    data = await state.get_data()
    
    giveaway_message = data.get("giveaway_message")
    giveaway_media = data.get("giveaway_media")
    giveaway_media_type = data.get("giveaway_media_type")
    
    giveaway_button_text = data.get("giveaway_button_text")
    
    giveaway_count_winners = data.get("giveaway_count_winners")
    
    giveaway_publish_channel_id = data.get("giveaway_publish_channel_id")   
    giveaway_required_channels = data.get("giveaway_required_channels")   
    
    giveaway_start_date = data.get("giveaway_start_date")
    giveaway_end_date = data.get("giveaway_end_date")
    try:
        
        await repo.giveaways.create_giveaway(   
            admin_id=callback.from_user.id,
            publish_channels=[giveaway_publish_channel_id],
            required_channels=giveaway_required_channels,
            view_details={
                "text": giveaway_message,
                "media": giveaway_media,
                "media_type": giveaway_media_type,
                "button_text": giveaway_button_text,
            },
            count_winners=giveaway_count_winners,
            use_boost=False,
            use_capha=False,
            use_block_twinks=False,
            start_at=giveaway_start_date,
            ends_at=giveaway_end_date,
        )
        await repo.mailings.create_mailing(
            created_by_admin_id=callback.from_user.id,
            task_type="giveaway",
            target_id=giveaway_publish_channel_id,
            message_type=giveaway_media_type,
            media_file_id=giveaway_media,
            text=giveaway_message,
            reply_markup=[{
                "text": giveaway_button_text,
                "url": "link_for_join_giveaway.com"
            }],
            scheduled_at=giveaway_start_date,
        )
        await repo.commit()
    
    except Exception as e:

        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        await callback.message.answer("‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        await state.clear()
        return
    
    text_publish = " –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç" if giveaway_start_date < datetime.now() else f": {giveaway_start_date.strftime('%d.%m.%Y %H:%M')}"
    
    await callback.message.edit_text("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
                                  f"üîî –ë—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω{text_publish}")
    await state.clear()
    